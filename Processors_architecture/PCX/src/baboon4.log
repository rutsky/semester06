Loaded `../data/baboon4.pcx' file.
1160132 bytes length.
PCX image header info:
  Manufacturer:     10
  Version:          5
  Encoding:         1
  Bits per pixel:   8
  Window:           from (0,0) to (595,595)
  Resolution (dpi): (300,300)
  Planes:           3
  Bytes per line:   596
  Pallete type:     1
  Screen size:      (0,0)
Starting 10 runs by 100 calls...
Average result based on 10 runs by 100 calls.
Implementation: general
10 * 100 calls in 10.861    seconds (min=1.076     max=1.097     avg=1.0861    seconds per 100 calls)

Implementation: # 1  w/o iostream
10 * 100 calls in 9.952     seconds (min=0.986     max=1.003     avg=0.9952    seconds per 100 calls)

Implementation: # 2  constants inlined
10 * 100 calls in 9.995     seconds (min=0.987     max=1.045     avg=0.9995    seconds per 100 calls)

Implementation: # 3  using `int' type
10 * 100 calls in 8.954     seconds (min=0.875     max=1.003     avg=0.8954    seconds per 100 calls)

Implementation: # 4  deduced output image addressing
10 * 100 calls in 5.727     seconds (min=0.563     max=0.578     avg=0.5727    seconds per 100 calls)

Implementation: # 5  deduced input data addressing
10 * 100 calls in 6.542     seconds (min=0.64      max=0.703     avg=0.6542    seconds per 100 calls)

Implementation: # 6  reimplemented cycle
10 * 100 calls in 5.768     seconds (min=0.554     max=0.69      avg=0.5768    seconds per 100 calls)

Implementation: # 7  inlined outputting
10 * 100 calls in 4.345     seconds (min=0.426     max=0.444     avg=0.4345    seconds per 100 calls)

Implementation: # 8  inlined outputting in all cases
10 * 100 calls in 4.106     seconds (min=0.403     max=0.419     avg=0.4106    seconds per 100 calls)

Implementation: # 9  pairing in output
10 * 100 calls in 4.069     seconds (min=0.4       max=0.414     avg=0.4069    seconds per 100 calls)

Implementation: # 9a using memset() for output
10 * 100 calls in 4.254     seconds (min=0.414     max=0.44      avg=0.4254    seconds per 100 calls)

Implementation: #10  I/O by DWORD
10 * 100 calls in 4.065     seconds (min=0.399     max=0.412     avg=0.4065    seconds per 100 calls)

Implementation: #11  I/O by paired 2 DWORDs
10 * 100 calls in 4.393     seconds (min=0.433     max=0.443     avg=0.4393    seconds per 100 calls)

Implementation: #11a I/O by blindly paired 2 DWORDs
10 * 100 calls in 4.106     seconds (min=0.402     max=0.422     avg=0.4106    seconds per 100 calls)

Implementation: #11b I/O by blindly paired 4 DWORDs
10 * 100 calls in 4.067     seconds (min=0.398     max=0.413     avg=0.4067    seconds per 100 calls)

Implementation: #12  reading aligned by 4 bytes
10 * 100 calls in 6.774     seconds (min=0.667     max=0.7       avg=0.6774    seconds per 100 calls)

Implementation: #13  I/O by blindly paired 2 DWORDs using MMX
10 * 100 calls in 4.592     seconds (min=0.451     max=0.466     avg=0.4592    seconds per 100 calls)

Implementation: #13a I/O by blindly paired 2 DWORDs using MMX (only copying with MMX)
10 * 100 calls in 4.002     seconds (min=0.392     max=0.408     avg=0.4002    seconds per 100 calls)

Implementation: 14   I/O by blindly paired 2 DWORDs using MMX + output using SSE
10 * 100 calls in 4.523     seconds (min=0.442     max=0.461     avg=0.4523    seconds per 100 calls)

Implementation: 15   Only using SSE for output
10 * 100 calls in 4.237     seconds (min=0.414     max=0.431     avg=0.4237    seconds per 100 calls)

