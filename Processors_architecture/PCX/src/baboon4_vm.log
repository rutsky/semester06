Loaded `../data/baboon4.pcx' file.
1160132 bytes length.
PCX image header info:
  Manufacturer:     10
  Version:          5
  Encoding:         1
  Bits per pixel:   8
  Window:           from (0,0) to (595,595)
  Resolution (dpi): (300,300)
  Planes:           3
  Bytes per line:   596
  Pallete type:     1
  Screen size:      (0,0)
Starting 10 runs by 100 calls...
Average result based on 10 runs by 100 calls.
Implementation: general
10 * 100 calls in 15.2806   seconds (min=1.50211   max=1.64553   avg=1.52806   seconds per 100 calls)

Implementation: # 1  w/o iostream
10 * 100 calls in 14.3708   seconds (min=1.42803   max=1.44909   avg=1.43708   seconds per 100 calls)

Implementation: # 2  constants inlined
10 * 100 calls in 14.4216   seconds (min=1.43123   max=1.48017   avg=1.44216   seconds per 100 calls)

Implementation: # 3  using `int' type
10 * 100 calls in 15.0654   seconds (min=1.48017   max=1.52982   avg=1.50654   seconds per 100 calls)

Implementation: # 4  deduced output image addressing
10 * 100 calls in 6.55543   seconds (min=0.642266  max=0.671862  avg=0.655543  seconds per 100 calls)

Implementation: # 5  deduced input data addressing
10 * 100 calls in 6.1461    seconds (min=0.601624  max=0.650905  avg=0.61461   seconds per 100 calls)

Implementation: # 6  reimplemented cycle
10 * 100 calls in 5.48175   seconds (min=0.531841  max=0.564837  avg=0.548175  seconds per 100 calls)

Implementation: # 7  inlined outputting
10 * 100 calls in 4.58423   seconds (min=0.440214  max=0.502668  avg=0.458423  seconds per 100 calls)

Implementation: # 8  inlined outputting in all cases
10 * 100 calls in 4.45599   seconds (min=0.429837  max=0.474488  avg=0.445599  seconds per 100 calls)

Implementation: # 9  pairing in output
10 * 100 calls in 4.57717   seconds (min=0.447908  max=0.465228  avg=0.457717  seconds per 100 calls)

Implementation: # 9a using memset() for output
10 * 100 calls in 4.74613   seconds (min=0.460285  max=0.496773  avg=0.474613  seconds per 100 calls)

Implementation: #10  I/O by DWORD
10 * 100 calls in 4.93856   seconds (min=0.483284  max=0.511273  avg=0.493856  seconds per 100 calls)

Implementation: #11  I/O by paired 2 DWORDs
10 * 100 calls in 4.94996   seconds (min=0.472714  max=0.57634   avg=0.494996  seconds per 100 calls)

Implementation: #11a I/O by blindly paired 2 DWORDs
10 * 100 calls in 5.08182   seconds (min=0.492845  max=0.567838  avg=0.508182  seconds per 100 calls)

Implementation: #11b I/O by blindly paired 4 DWORDs
10 * 100 calls in 4.95566   seconds (min=0.476338  max=0.524398  avg=0.495566  seconds per 100 calls)

Implementation: #12  reading aligned by 4 bytes
10 * 100 calls in 6.91038   seconds (min=0.678602  max=0.719356  avg=0.691038  seconds per 100 calls)

Implementation: #13  I/O by blindly paired 2 DWORDs using MMX
10 * 100 calls in 5.40243   seconds (min=0.530708  max=0.548231  avg=0.540243  seconds per 100 calls)

Implementation: #13a I/O by blindly paired 2 DWORDs using MMX (only copying with MMX)
10 * 100 calls in 5.18197   seconds (min=0.498375  max=0.542059  avg=0.518197  seconds per 100 calls)

Implementation: 14   I/O by blindly paired 2 DWORDs using MMX + output using SSE
10 * 100 calls in 5.31723   seconds (min=0.520596  max=0.543763  avg=0.531723  seconds per 100 calls)

Implementation: 15   Only using SSE for output
10 * 100 calls in 4.53002   seconds (min=0.442602  max=0.47196   avg=0.453002  seconds per 100 calls)

